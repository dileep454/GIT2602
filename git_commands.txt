GIT Commands
========================================================================
 git init 
 # initializes .git repository
-------------------------------
 git add
 # add file to the stagging area
--------------------------------
 git add .
 # adds all the files in the current directory to stagging area
 ---------------------------------
 git add -A
 # add all new and changed files to stagging area 
 ----------------------------------
 git add *
 # adds all the files at once
 -----------------------------------
 git commit -m "commit message"
 # commit changes 
 -----------------------------------
 git push <central repository>
 # push the changes to central repository
 ------------------------------------
 git pull
 # pulls the changes that are in central repository to local machine
 -------------------------------------
 git branch
 # list branches (the asterish denotes the current branch)
 ---------------------------------------
 git branch -a
 # list all the branches in local and remote
 -----------------------------------------
 git branch <branch name>
 # create a new branch
 -----------------------------------------
 git brach -d <branch name>
 # the command deletes the branch
 -----------------------------------------
 git checkout <branch name>
 # switch to branch
 ------------------------------------------
 git checkout -b
 # switch to the branch last checkeout
 ------------------------------------------
 git checkout --
 # discard changes to a file
 -------------------------------------------
 git checkout -b <branch name>
 # creates a branch and checkout to that branch
 --------------------------------------------
 git checkout master
 # switches to the master branch
 -----------------------------------------------
 git merge <branch name>
 # merge a branch to the active branch
 -----------------------------------------------
 git merge <branch name> <target branch>
 # merge a branch into target branch
 ------------------------------------------------
 git stash
 # stash changes in dirty working directory
 ------------------------------------------------
 git stash <file name>
 # only stashes a particular file in dirty working directory
 -------------------------------------------------
 git stash pop <file name>
 # deletes the file in stash and file will be in previous state
 -------------------------------------------------
 git stash apply <file name>
 # a copy is maintained in stash area and file will be in previous state
 -------------------------------------------------
 git commit -am "commit message"
 # commit skipping the staging area and adding message
 -------------------------------------------------
 git log
 # view changes
 --------------------------------------------
 git log --summary
 # view changes detailed
 -------------------------------------------------
 git log --oneline
 # show the list of commits in one line format
 -------------------------------------------------
 git log -all -grep='commit message'
 searches commits that contain a log message
 -------------------------------------------------
 git log --pretty --oneline
 # View logs in key value pairs
 -------------------------------------------------
 git log -follow <file name>
 # This command lists version history for a file, including the renaming of files also
 -------------------------------------------------
 git reset head <file name>
 # brings back the file from stagging area to working directory
 -------------------------------------------------
 git config --help
 # to veiw help regarding config
 -------------------------------------------------
 git config --default user.email "dileep.thati@gamil.com"
 # to config the email for the first time
 -------------------------------------------------
 git config --default user,name "dileep"
 # to config name for the first time
 -------------------------------------------------
 git config --default push.config "current"
 # to config push method
 -------------------------------------------------
 git diff
 # to view the differences between head and working directory
 -------------------------------------------------
 git reset
 #
 -------------------------------------------------
 git status
 # to view the status of working directory and stagging area
 -------------------------------------------------
 git rm <file name>
 git commit -m "commit message"
 git push <remote><url>
 # to remove a file 
 -------------------------------------------------
 git show
 #
 -------------------------------------------------
 git remote
 # list all remote
 -------------------------------------------------
 git remote -v
 # lists all currently configured remote repositories
 -------------------------------------------------
 git push --all origin
 # Push all branches to the remote repository
 -------------------------------------------------
 git tag
 # lists all tags
 -------------------------------------------------
 git tag 1.0.0 <commitID>
 # You can use tagging to mark a significant changeset such as a release
 -------------------------------------------------
 git push --tags
 # push all tags to remote repository
 -------------------------------------------------
 git cherry-pick <file name>
 # add some commits to the top of the current branch
 -------------------------------------------------
 git commit --amend -m "new commit message"
 git push --force <repository> <branch>
 
 # changing git commit message after push
 -------------------------------------------------
 git config --list
 # show current configuration
 -------------------------------------------------
 git config --global --list
 # show global configuration
 -------------------------------------------------
 git stash drop
 # remove the last set of stashed changes
 -------------------------------------------------
 git log -p <file>
 # show changes over time for a specific file
 -------------------------------------------------
 git blame
 # who changed what and when in file
 --------------------------------------------------------------------------------------------------
 git reflog show
 # show reference log
 -------------------------------------------------
 git reflog deletes
 # delete reference log
 -------------------------------------------------
 git branch -r
 # list all remote branches
 -------------------------------------------------
 git checkout -b <new_branch> <existing branch>
 # checkout and create a new branch from existing brach 
 -------------------------------------------------
 git branch -m <new _branch_name>
 # rename current branch to new name
 -------------------------------------------------
git branch -D <branch>
 # Force delete a local branch (you will lose unmerged changes)
 -------------------------------------------------
 git fetch
 # download all changes from remote but don't integrate into head.
 -------------------------------------------------
 git remote pull <remote><url> 
 download changes and directly merge/integrate into head
 -------------------------------------------------
 git push <remote> --delete <branch>
 # delete a branch on the remote
 -------------------------------------------------
 git pull --rebase <remote> <branch>
 # get all the changes from head to local repository without a merge
 -------------------------------------------------
 